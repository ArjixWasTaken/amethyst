#!/bin/env amber

import { array_shift } from "std/array"
import { file_exists } from "std/fs"
import { is_command, input_confirm } from "std/env"
import { join } from "std/text"

import { info, warn, fatal } from "./lib/utils.ab"
import { locate_project, get_project_property } from "./lib/project.ab"
import { is_available_locally, is_available_remotely, download, execute_script } from "./lib/amber_manager.ab"

import { cmd_help } from "./commands/help.ab"
import { cmd_info } from "./commands/info.ab"
import { cmd_init } from "./commands/init.ab"
import { cmd_list } from "./commands/list.ab"

// TODO: Remove any unnecessary dependencies
const deps = ["uname", "curl", "jq", "python"]
let missing = [Text]

for dep in deps {
    if not is_command(dep) {
        missing += [dep]
    }
}

if len(missing) > 0 {
    fatal("Missing dependencies: {join(missing, ",")}")
}

main(args) {
    let arguments = args
    array_shift(arguments)

    let arg = array_shift(arguments)

    const project = locate_project()
    if file_exists(arg) and project[0] == "yes" {
        const version = get_project_property(project[1], "amethyst", "amber-version")

        if is_available_locally(version) {
            execute_script(version, arg, arguments)
            // execute_script uses exec, so really, this *is* unreachable
            // but just in case
            exit(0)
        }

        warn("Amber {version} is not available locally.")
        info("Checking if it is available for download...")

        if not is_available_remotely(version) {
            fatal("Couldn't satisfy version requirement for amber {version}")
        }

        info("Amber {version} is available for download.")
        if not input_confirm("Proceed with download?") {
            fatal("Can't execute {arg}.")
        }

        info("Downloading amber {version}...")
        download(version)

        if is_available_locally(version) {
            execute_script(version, arg, arguments)
            // execute_script uses exec, so really, this *is* unreachable
            // but just in case
            exit(0)
        }
    }

    if {
        // TODO: `help` doesn't work if amber is directly executing this file
        // Maybe we should report this to the amber team?
        arg == "help": cmd_help(arguments)
        arg == "list": cmd_list(arguments)
        arg == "init": cmd_init(arguments)
        arg == "info": cmd_info(arguments)
    }
}
